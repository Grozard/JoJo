import requests
import base64
from typing import Optional, Tuple, Dict, Any
import time
from urllib.parse import quote

class GitHubAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub API"""
    
    BASE_URL = "https://api.github.com"
    HEADERS = {
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'GitHub-Welcome-App/1.0'
    }
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(self.HEADERS)
    
    def make_request(self, url: str) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 404:
                return None
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            remaining = int(response.headers.get('X-RateLimit-Remaining', 1))
            if remaining == 0:
                reset_time = int(response.headers.get('X-RateLimit-Reset', 0))
                wait_time = max(reset_time - time.time(), 0) + 1
                print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.0f} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
                return self.make_request(url)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return None
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None

class GitHubUserProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö GitHub"""
    
    def __init__(self):
        self.api = GitHubAPI()
    
    def get_user_info(self, username: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        url = f"{GitHubAPI.BASE_URL}/users/{quote(username)}"
        return self.api.make_request(url)
    
    def get_user_repos(self, repos_url: str) -> Optional[list]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.api.make_request(repos_url)
    
    def get_readme_content(self, username: str, repo_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README —Ñ–∞–π–ª–∞"""
        url = f"{GitHubAPI.BASE_URL}/repos/{quote(username)}/{quote(repo_name)}/readme"
        readme_data = self.api.make_request(url)
        
        if readme_data and 'content' in readme_data:
            try:
                return base64.b64decode(readme_data['content']).decode('utf-8')
            except (base64.binascii.Error, UnicodeDecodeError):
                return "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è README —Ñ–∞–π–ª–∞"
        
        return "README —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def find_best_repo(self, repos: list, username: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        if not repos:
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for repo in repos:
            if repo['name'].lower() == username.lower():
                return repo
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å README
        for repo in repos:
            if repo['has_wiki'] or repo['description']:
                return repo
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        return sorted(repos, key=lambda x: x.get('pushed_at', ''), reverse=True)[0]
    
    def get_user_repo_info(self, username: str) -> Tuple[Optional[Dict], str, Optional[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ README —Ñ–∞–π–ª
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = self.get_user_info(username)
        if not user_data:
            return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        repos_data = self.get_user_repos(user_data['repos_url'])
        if not repos_data:
            return user_data, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤", None
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        personal_repo = self.find_best_repo(repos_data, username)
        if not personal_repo:
            return user_data, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", None
        
        # –ü–æ–ª—É—á–∞–µ–º README
        readme_content = self.get_readme_content(username, personal_repo['name'])
        
        return user_data, readme_content, personal_repo['name']

def format_user_info(user_data: Dict[str, Any], repo_name: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    info_lines = [
        "=" * 60,
        f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user_data.get('name', user_data.get('login', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))}!",
        f"üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {user_data.get('bio', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.get('followers', 0)}",
        f"üìä –ü—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {user_data.get('public_repos', 0)}",
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {user_data['html_url']}",
        f"üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}",
        "=" * 60
    ]
    return "\n".join(info_lines)

def format_readme_preview(readme_content: str, max_length: int = 500) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä README"""
    if readme_content == "README —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω":
        return "‚ùå README —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    cleaned_content = ' '.join(readme_content.split())
    
    if len(cleaned_content) > max_length:
        preview = cleaned_content[:max_length] + "..."
        return f"{preview}\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_length} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(cleaned_content)})"
    
    return cleaned_content

def process_user(username: str, processor: GitHubUserProcessor) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    print(f"\nüîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ GitHub...")
    
    user_data, readme_content, repo_name = processor.get_user_repo_info(username)
    
    if user_data is None:
        if readme_content == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω":
            print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            print(f"‚ùå {readme_content}")
        return False
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(format_user_info(user_data, repo_name))
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README
    print("\nüìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ README —Ñ–∞–π–ª–∞:")
    print("-" * 40)
    print(format_readme_preview(readme_content))
    
    print("\n" + "=" * 60)
    print("‚ú® –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!")
    print("=" * 60)
    print("–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print("=" * 60)
    
    processor = GitHubUserProcessor()
    processed_users = set()
    
    while True:
        try:
            username = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub: ").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
            if username.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not username:
                print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if username.lower() in processed_users:
                print("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ.")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if process_user(username, processor):
                processed_users.add(username.lower())
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()