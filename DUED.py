import requests
import base64
from typing import Optional, Tuple, Dict, Any, List
import time
from urllib.parse import quote
from datetime import datetime, timedelta
from collections import defaultdict
import calendar

class GitHubAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub API"""
    
    BASE_URL = "https://api.github.com"
    HEADERS = {
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'GitHub-Welcome-App/1.0'
    }
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(self.HEADERS)
    
    def make_request(self, url: str, params: Optional[Dict] = None) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = self.session.get(url, params=params, timeout=15)
            
            if response.status_code == 404:
                return None
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            remaining = int(response.headers.get('X-RateLimit-Remaining', 1))
            if remaining == 0:
                reset_time = int(response.headers.get('X-RateLimit-Reset', 0))
                wait_time = max(reset_time - time.time(), 0) + 1
                print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.0f} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
                return self.make_request(url, params)
            
            return response.json()
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            return None
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None

class GitHubUserProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö GitHub"""
    
    def __init__(self):
        self.api = GitHubAPI()
    
    def get_user_info(self, username: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        url = f"{GitHubAPI.BASE_URL}/users/{quote(username)}"
        return self.api.make_request(url)
    
    def get_user_repos(self, repos_url: str) -> Optional[list]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.api.make_request(repos_url)
    
    def get_user_events(self, username: str) -> Optional[list]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥"""
        one_year_ago = (datetime.now() - timedelta(days=365)).isoformat()
        url = f"{GitHubAPI.BASE_URL}/users/{quote(username)}/events"
        params = {'per_page': 100}  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return self.api.make_request(url, params)
    
    def get_readme_content(self, username: str, repo_name: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README —Ñ–∞–π–ª–∞"""
        url = f"{GitHubAPI.BASE_URL}/repos/{quote(username)}/{quote(repo_name)}/readme"
        readme_data = self.api.make_request(url)
        
        if readme_data and 'content' in readme_data:
            try:
                return base64.b64decode(readme_data['content']).decode('utf-8')
            except (base64.binascii.Error, UnicodeDecodeError):
                return "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è README —Ñ–∞–π–ª–∞"
        
        return "README —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    def find_best_repo(self, repos: list, username: str) -> Optional[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
        if not repos:
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for repo in repos:
            if repo['name'].lower() == username.lower():
                return repo
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å README
        for repo in repos:
            if repo['has_wiki'] or repo['description']:
                return repo
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        return sorted(repos, key=lambda x: x.get('pushed_at', ''), reverse=True)[0]
    
    def analyze_activity(self, events: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥"""
        if not events:
            return {
                'total_events': 0,
                'monthly_activity': defaultdict(int),
                'activity_by_type': defaultdict(int),
                'last_activity': None
            }
        
        monthly_activity = defaultdict(int)
        activity_by_type = defaultdict(int)
        last_activity = None
        
        for event in events:
            try:
                event_date = datetime.strptime(event['created_at'], '%Y-%m-%dT%H:%M:%SZ')
                month_key = event_date.strftime('%Y-%m')
                monthly_activity[month_key] += 1
                
                event_type = event['type']
                activity_by_type[event_type] += 1
                
                if last_activity is None or event_date > last_activity:
                    last_activity = event_date
                    
            except (KeyError, ValueError):
                continue
        
        return {
            'total_events': len(events),
            'monthly_activity': dict(monthly_activity),
            'activity_by_type': dict(activity_by_type),
            'last_activity': last_activity
        }
    
    def get_activity_summary(self, activity_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if activity_data['total_events'] == 0:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥"
        
        summary = []
        summary.append(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {activity_data['total_events']:,}")
        
        # –¢–æ–ø-5 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
        top_months = sorted(activity_data['monthly_activity'].items(), 
                          key=lambda x: x[1], reverse=True)[:5]
        if top_months:
            summary.append("üìÖ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—è—Ü—ã:")
            for month, count in top_months:
                year, month_num = month.split('-')
                month_name = calendar.month_name[int(month_num)]
                summary.append(f"   ‚Ä¢ {month_name} {year}: {count} —Å–æ–±—ã—Ç–∏–π")
        
        # –¢–æ–ø-5 —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        top_activities = sorted(activity_data['activity_by_type'].items(),
                              key=lambda x: x[1], reverse=True)[:5]
        if top_activities:
            summary.append("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
            for activity_type, count in top_activities:
                summary.append(f"   ‚Ä¢ {self.format_event_type(activity_type)}: {count}")
        
        if activity_data['last_activity']:
            last_active = activity_data['last_activity'].strftime('%d.%m.%Y %H:%M')
            summary.append(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}")
        
        return "\n".join(summary)
    
    def format_event_type(self, event_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        event_names = {
            'PushEvent': 'Push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π',
            'CreateEvent': '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è',
            'WatchEvent': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
            'ForkEvent': '–§–æ—Ä–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è',
            'PullRequestEvent': 'Pull Request',
            'IssuesEvent': '–†–∞–±–æ—Ç–∞ —Å issues',
            'CommitCommentEvent': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–∏—Ç–∞–º',
            'DeleteEvent': '–£–¥–∞–ª–µ–Ω–∏–µ',
            'ReleaseEvent': '–†–µ–ª–∏–∑—ã'
        }
        return event_names.get(event_type, event_type)
    
    def get_user_repo_info(self, username: str) -> Tuple[Optional[Dict], str, Optional[str], Optional[Dict]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, README –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_data = self.get_user_info(username)
        if not user_data:
            return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", None, None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        repos_data = self.get_user_repos(user_data['repos_url'])
        if not repos_data:
            return user_data, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤", None, None
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        personal_repo = self.find_best_repo(repos_data, username)
        if not personal_repo:
            return user_data, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", None, None
        
        # –ü–æ–ª—É—á–∞–µ–º README
        readme_content = self.get_readme_content(username, personal_repo['name'])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        events = self.get_user_events(username)
        activity_data = self.analyze_activity(events) if events else None
        
        return user_data, readme_content, personal_repo['name'], activity_data

def format_date(github_date: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ GitHub –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        date_obj = datetime.strptime(github_date, '%Y-%m-%dT%H:%M:%SZ')
        return date_obj.strftime('%d.%m.%Y')
    except (ValueError, TypeError):
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_user_info(user_data: Dict[str, Any], repo_name: str, activity_data: Optional[Dict] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    joined_date = format_date(user_data.get('created_at'))
    
    info_lines = [
        "=" * 70,
        f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user_data.get('name', user_data.get('login', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))}!",
        f"üìù –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {user_data.get('bio', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
        f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ GitHub: {joined_date}",
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data.get('followers', 0):,}",
        f"üìà –ü–æ–¥–ø–∏—Å–∫–∏: {user_data.get('following', 0):,}",
        f"üìä –ü—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {user_data.get('public_repos', 0):,}",
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {user_data['html_url']}",
        f"üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if activity_data and activity_data['total_events'] > 0:
        info_lines.append(f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –≥–æ–¥: {activity_data['total_events']:,} —Å–æ–±—ã—Ç–∏–π")
    
    info_lines.append("=" * 70)
    return "\n".join(info_lines)

def format_readme_preview(readme_content: str, max_length: int = 500) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä README"""
    if readme_content == "README —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω":
        return "‚ùå README —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    cleaned_content = ' '.join(readme_content.split())
    
    if len(cleaned_content) > max_length:
        preview = cleaned_content[:max_length] + "..."
        return f"{preview}\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_length} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {len(cleaned_content)})"
    
    return cleaned_content

def process_user(username: str, processor: GitHubUserProcessor) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    print(f"\nüîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞ GitHub...")
    
    user_data, readme_content, repo_name, activity_data = processor.get_user_repo_info(username)
    
    if user_data is None:
        if readme_content == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω":
            print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            print(f"‚ùå {readme_content}")
        return False
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print(format_user_info(user_data, repo_name, activity_data))
    
    # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if activity_data:
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:")
        print("-" * 40)
        print(processor.get_activity_summary(activity_data))
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README
    print("\nüìñ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ README —Ñ–∞–π–ª–∞:")
    print("-" * 40)
    print(format_readme_preview(readme_content))
    
    print("\n" + "=" * 70)
    print("‚ú® –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GitHub –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!")
    print("=" * 70)
    print("üìä –¢–µ–ø–µ—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥!")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit', 'quit' –∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print("=" * 70)
    
    processor = GitHubUserProcessor()
    processed_users = set()
    
    while True:
        try:
            username = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub: ").strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
            if username.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            if not username:
                print("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if username.lower() in processed_users:
                print("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ.")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if process_user(username, processor):
                processed_users.add(username.lower())
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()